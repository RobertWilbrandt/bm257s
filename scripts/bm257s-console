#!/usr/bin/env python3
"""Minimal console for monitoring brymen bm257s multimeter data"""
# pylint: disable=invalid-name

import curses
import sys

import bm257s


def main(stdscr, interface):
    """Start minimal bm257s console

    :param stdscr: Curses window object
    :type stdscr: curses.window
    :param interface: Multimeter interface
    :type interface: bm257s.BM257sSerialInterface
    """
    stdscr.clear()
    curses.use_default_colors()

    COLOR_PAIR_STATUS_OK = 1
    curses.init_pair(COLOR_PAIR_STATUS_OK, curses.COLOR_GREEN, -1)
    COLOR_PAIR_STATUS_ERR = 2
    curses.init_pair(COLOR_PAIR_STATUS_ERR, curses.COLOR_RED, -1)

    stdscr.addstr(1, 1, "Quantity:")
    win_qty = curses.newwin(1, 20, 1, 20)
    stdscr.addstr(2, 1, "Measurement:")
    win_meas = curses.newwin(1, 20, 2, 20)

    stdscr.addstr(4, 1, "Status:")
    win_status = curses.newwin(1, 30, 4, 10)

    while 1:
        try:
            measurement = interface.read()
            win_qty.addstr(0, 0, f"{measurement[0]:>19}")
            win_meas.addstr(0, 0, f"{str(measurement[1]):>19}")

            win_status.addstr(
                0, 0, f"{'OK':>29}", curses.color_pair(COLOR_PAIR_STATUS_OK)
            )

        except RuntimeError:
            win_status.addstr(
                0, 0, f"{'ERROR':>29}", curses.color_pair(COLOR_PAIR_STATUS_ERR)
            )

        win_qty.refresh()
        win_meas.refresh()
        win_status.refresh()
        stdscr.refresh()


if __name__ == "__main__":
    try:
        with bm257s.BM257sSerialInterface() as mm:
            try:
                curses.wrapper(main, mm)
            except KeyboardInterrupt:
                curses.endwin()

    except RuntimeError as ex:
        print(f"Could not open serial device: {ex}", file=sys.stderr)
        sys.exit(1)
