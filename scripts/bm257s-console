#!/usr/bin/env python3
"""Minimal console for monitoring brymen bm257s multimeter data"""
# pylint: disable=invalid-name

import curses
import sys

import bm257s


def main(stdscr):
    """Start minimal bm257s console

    :param stdscr: Curses window object
    :type stdscr: curses.window
    """
    stdscr.clear()
    curses.use_default_colors()

    COLOR_PAIR_STATUS_OK = 1
    curses.init_pair(COLOR_PAIR_STATUS_OK, curses.COLOR_GREEN, -1)
    COLOR_PAIR_STATUS_ERR = 2
    curses.init_pair(COLOR_PAIR_STATUS_ERR, curses.COLOR_RED, -1)

    stdscr.addstr(1, 1, "Quantity:")
    win_qty = curses.newwin(1, 20, 1, 20)
    stdscr.addstr(2, 1, "Measurement:")
    win_meas = curses.newwin(1, 20, 2, 20)

    stdscr.addstr(4, 1, "Status:")
    win_status = curses.newwin(1, 30, 4, 10)

    with bm257s.BM257sSerialInterface() as mm:
        while 1:
            try:
                measurement = mm.read()
                win_qty.addstr(0, 0, f"{measurement[0]:>19}")
                win_meas.addstr(0, 0, f"{str(measurement[1]):>19}")

                win_status.addstr(
                    0, 0, f"{'OK':>29}", curses.color_pair(COLOR_PAIR_STATUS_OK)
                )

            except RuntimeError:
                win_status.addstr(
                    0, 0, f"{'ERROR':>29}", curses.color_pair(COLOR_PAIR_STATUS_ERR)
                )

            win_qty.refresh()
            win_meas.refresh()
            win_status.refresh()
            stdscr.refresh()


if __name__ == "__main__":
    try:
        curses.wrapper(main)
    except KeyboardInterrupt:
        curses.endwin()
        sys.exit(0)
